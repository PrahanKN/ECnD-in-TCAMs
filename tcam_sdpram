module tcam_sdpram #(
    parameter ADDR_WIDTH = 8,   // Address width
    parameter DATA_WIDTH = 4    // Data width
)(
    input clk,
    input rst,                  // Synchronous reset
    input wea,                  // Write enable
    input [ADDR_WIDTH-1:0] addra,  // Address for writing
    input [ADDR_WIDTH-1:0] addrb,  // Address for reading
    input [DATA_WIDTH-1:0] dina,   // Data input
    output reg [DATA_WIDTH-1:0] readb  // Data output (synchronous update)
);

    // RAM with 7 bits: 4 data + 3 parity bits
    reg [6:0] ram[2**ADDR_WIDTH-1:0];

    // Initialize RAM at the start
    integer i;
    initial begin
        for (i = 0; i < 2**ADDR_WIDTH; i = i + 1) begin
            ram[i] = 7'b0000000;  // Initialize all RAM locations to zero
        end
    end

    // Hamming encoding function to store 7 bits (4 data + 3 parity bits)
    function [6:0] hamming_encode(input [3:0] data);
        reg [6:0] result;
        begin
            result[6:4] = data;  // Store the 4 data bits
            result[3] = data[3] ^ data[2] ^ data[0];  // Parity bit P1
            result[2] = data[3] ^ data[1] ^ data[0];  // Parity bit P2
            result[1] = data[2] ^ data[1] ^ data[0];  // Parity bit P3
            result[0] = data[0];  // Extra parity bit
            hamming_encode = result;
        end
    endfunction

    // Synchronous Write Operation
    always @(posedge clk) begin
        if (wea) begin
            ram[addra] <= hamming_encode(dina);  // Write the encoded data
        end
    end

    // Synchronous Read Operation
    always @(posedge clk) begin
        if (rst) begin
            readb <= 4'b0000;  // Reset output
        end else begin
            readb <= ram[addrb][6:3];  // Extract and return the data bits
        end
    end

endmodule
