module tb_tcam_line_encoder;

  // Parameters
  parameter ADDR_WIDTH = 8;
  localparam MATCH_WIDTH = 2**ADDR_WIDTH;

  // Inputs
  reg clk;
  reg rst;
  reg [MATCH_WIDTH-1:0] line_match;
  reg line_valid;

  // Outputs
  wire [ADDR_WIDTH-1:0] addr;
  wire addr_valid;
  wire addr_null;

  // Instantiate the tcam_line_encoder
  tcam_line_encoder #(
    .ADDR_WIDTH(ADDR_WIDTH)
  ) uut (
    .clk(clk),
    .rst(rst),
    .line_match(line_match),
    .line_valid(line_valid),
    .addr(addr),
    .addr_valid(addr_valid),
    .addr_null(addr_null)
  );

  // Clock generation
  always begin
    #5 clk = ~clk; // 100 MHz clock
  end

  // Test sequence
  initial begin
    // Initialize inputs
    clk = 0;
    rst = 0;
    line_match = 0;
    line_valid = 0;

    // Reset the system
    #10 rst = 1;
    #10 rst = 0;

    // Test 1: Single match at index 5
    line_match = 1 << 5; // Match at address 5
    line_valid = 1;
    #20;
    line_valid = 0;
    #20;

    // Test 2: Multiple matches at different indices
    line_match = (1 << 3) | (1 << 7) | (1 << 10);
    line_valid = 1;
    #20;
    line_valid = 0;
    #20;

    // Test 3: No match
    line_match = 0;
    line_valid = 1;
    #20;
    line_valid = 0;
    #20;

    // Test 4: Reset during operation
    line_match = 1 << 12;
    line_valid = 1;
    #10 rst = 1;
    #10 rst = 0;
    line_valid = 0;
    #20;

    // Test 5: Match at highest address (2^ADDR_WIDTH-1)
    line_match = 1 << (MATCH_WIDTH-1);
    line_valid = 1;
    #20;
    line_valid = 0;
    #20;

    // End simulation
    $finish;
  end

  // Monitor outputs
  initial begin
    $monitor("At time %t: line_match = %b, addr = %d, addr_valid = %b, addr_null = %b", 
             $time, line_match, addr, addr_valid, addr_null);
  end

endmodule



module tb_line_array;

    // Parameters
    parameter ADDR_WIDTH = 8;
    parameter DATA_WIDTH = 4;
    localparam MEM_DEPTH = 2**ADDR_WIDTH;

    // Testbench signals
    reg clk;
    reg req_valid;
    reg [DATA_WIDTH-1:0] req_key;
    wire [MEM_DEPTH-1:0] match;
    wire [MEM_DEPTH-1:0] active;

    // Instantiate the test1 module
    tcam_line_array #(
        .ADDR_WIDTH(ADDR_WIDTH),
        .DATA_WIDTH(DATA_WIDTH)
    ) uut (
        .clk(clk),
        .req_valid(req_valid),
        .req_key(req_key),
        .match(match),
        .active(active)
    );

    // Clock generation
    always #5 clk = ~clk;  // 100 MHz clock (10ns period)

    // Stimulus
    initial begin
        // Initialize signals
        clk = 0;
        req_valid = 0;
        req_key = 0;

        // Wait for initial reset
        #20;

        // Write test patterns to memory
        uut.mem[0] = 7'b1011011;  // Valid encoded data
        uut.mem[1] = 7'b1100100;  // 1-bit error (syndrome should detect and correct)
        uut.mem[2] = 7'b1110001;  // 1-bit error
        uut.active = 8'b111;      // Set active lines for first 3 entries

        // Test case 1: Valid key match (no error)
        req_key = 4'b1011;  // Matching data for mem[0]
        req_valid = 1;
        #20;
        req_valid = 0;
        #20;

        // Test case 2: Key with 1-bit error (correction needed)
        req_key = 4'b1001;  // Matching after correction for mem[1]
        req_valid = 1;
        #20;
        req_valid = 0;
        #20;

        // Test case 3: Key with uncorrectable error
        req_key = 4'b1110;
        req_valid = 1;
        #20;
        req_valid = 0;
        #20;

        // Test case 4: No match
        req_key = 4'b0101;
        req_valid = 1;
        #20;
        req_valid = 0;
        #20;

        // End simulation
        $finish;
    end

    // Monitor output
    initial begin
        $monitor("Time: %t | req_key: %b | match: %b | active: %b", 
                 $time, req_key, match, active);
    end

endmodule


module tb_tcam_sdpram;
    // Parameters
    parameter ADDR_WIDTH = 8;
    parameter DATA_WIDTH = 4;
    localparam MEM_DEPTH = 2**ADDR_WIDTH;

    // Testbench signals
    reg clk;
    reg rst;
    reg wea;
    reg [ADDR_WIDTH-1:0] addra;
    reg [ADDR_WIDTH-1:0] addrb;
    reg [DATA_WIDTH-1:0] dina;
    wire [DATA_WIDTH-1:0] readb;

    // Instantiate the test1 module
    tcam_sdpram #(
        .ADDR_WIDTH(ADDR_WIDTH),
        .DATA_WIDTH(DATA_WIDTH)
    ) uut (
        .clk(clk),
        .rst(rst),
        .wea(wea),
        .addra(addra),
        .addrb(addrb),
        .dina(dina),
        .readb(readb)
    );

    // Clock generation (10ns period -> 100 MHz)
    always #5 clk = ~clk;

    // Stimulus
    initial begin
        // Initialize signals
        clk = 0;
        rst = 1;
        wea = 0;
        addra = 0;
        addrb = 0;
        dina = 0;

        // Reset phase
        #15;
        rst = 0;
        
        // Write to address 0
        dina = 4'b1011;  // Data to encode
        addra = 8'b00000000;
        wea = 1;
        #10;
        wea = 0;

        // Write to address 1
        dina = 4'b1101;
        addra = 8'b00000001;
        wea = 1;
        #10;
        wea = 0;

        // Read back from address 0
        addrb = 8'b00000000;
        #10;

        // Read back from address 1
        addrb = 8'b00000001;
        #10;

        // Reset and read again
        rst = 1;
        #10;
        rst = 0;
        addrb = 8'b00000000;
        #10;

        // End simulation
        $finish;
    end

    // Monitor outputs
    initial begin
        $monitor("Time: %t | rst: %b | wea: %b | addra: %h | addrb: %h | dina: %b | readb: %b",
                 $time, rst, wea, addra, addrb, dina, readb);
    end

endmodule
